#pick
BD= lapply(data, function(x)x$BD)
#same column names
BD= lapply(BD, function(x){
colnames(x)<-colnames(BD[[1]])
return(x)
})
#merge
BD= do.call(rbind, BD)
#attach
res[["BD"]]= BD
}
#return
return(res)
}
setwd("I:\\Il mio Drive\\Esperimenti\\02 giovanni tapping pupilla\\data")
a= read_eyelink(1:2, c("fixation", "prepare", "response"))
a$ET
10 - 2*2.5
10 - (2*2.5)
library("pkgdown")
library(Pupilla)
devtools::load_all("C:/Users/blini/Desktop/Pupilla/Pupilla")
devtools::load_all("C:/Users/blini/Desktop/Pupilla/Pupilla")
library("Pupilla")
?embed
library("Pupilla")
devtools::load_all(".")
library(Pupilla)
library(Pupilla)
library("pkgdown")
clean_site()
build_search()
build_site()
clean_site()
build_site()
library("Pupilla")
?read_eyelink()
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
options(width = 999)
Sys.setenv(LANG = "en")
knitr::opts_chunk$set(
fig.path = "images/",
eval= T,
fig.width = 7, fig.height = 7
)
# Chunk 3
library("Pupilla")
library("dplyr")
library("ggplot2")
library("tidyr")
options(dplyr.summarise.inform = FALSE)
# Chunk 4
setwd("I:\\Il mio Drive\\Esperimenti\\01 math anxiety\\task\\data")
# Chunk 5
#set your own working directory first!
#wd= choose.dir()
subject= 10 #vector of ids; only 1 for this example
#as coded in the program - these are the relevant eyelink messages
keep_events = c(
"fixation",
"cue",
"target1",
"sign",
"target2",
"calculation",
"response",
"post_resp_fix",
"Wait_Feedback",
"feedback"
)
#read
data= read_eyelink(subject, keep_events)
#split for eyetracker and behavioral data
ET= data$ET
BD= data$BD
ET$Subject= subject
BD$Subject= subject
# Chunk 6
#whether it's practice or experiment
ET$Phase = copy_variable(
"Phase",
id_var = "Subject",
constrained_var = "trial",
larger_df = ET,
smaller_df = BD
)
#result of the problem
ET$Result = copy_variable(
"Result",
id_var = "Subject",
constrained_var = "trial",
larger_df = ET,
smaller_df = BD
)
#response
ET$Response = copy_variable(
"response",
id_var = "Subject",
constrained_var = "trial",
larger_df = ET,
smaller_df = BD
)
#set accuracy
ET$Accuracy = ifelse(ET$Response == ET$Result,
"correct",
"incorrect")
#condition
ET$Cue = copy_variable(
"Cue",
id_var = "Subject",
constrained_var = "trial",
larger_df = ET,
smaller_df = BD
)
# Chunk 7
ET= ET[ET$Phase== "experiment",]
BD= DF[DF$Phase== "experiment",]
ET= ET[ET$Phase== "experiment",]
BD= BD[BD$Phase== "experiment",]
ET$Pupil= ET$paL
#very important, set zeros to NA for preprocessing
ET$Pupil= ifelse(ET$Pupil==0, NA, ET$Pupil)
ET$Pupil[ET$is_Fixation==0]= NA
cut_off= mean(ET$Pupil, na.rm= T) - 2.5*sd(ET$Pupil, na.rm= T)
ET$Pupil= ifelse(ET$Pupil < cut_off, NA, ET$Pupil)
ET= ET %>%
group_by(trial) %>%
mutate(Time= time-time[Event== "fixation"][1])
ET$Time= downsample_time(ET$Time, 20)
#the default parameters:
pp_options()
#this changes the width of the window for smoothing
pp_options("extend_by"= 25) #strip 50 ms before and after blinks
pp_options("extend_blink"= 25) #further extend prior to interpolation
pp_options("spar"= 0.8) #smoothing parameter
#entire preprocessing
ET= ET %>%
group_by(Subject, trial) %>%
mutate(Pupil_pp= pre_process(Pupil, Time))
ET %>% filter(Subject==10 & trial== 13) %>%
check_series("Pupil", "Pupil_pp", "Time")
#drop
ET= ET %>% filter(!is.na(Pupil_pp))
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
options(width = 999)
Sys.setenv(LANG = "en")
knitr::opts_chunk$set(
fig.path = "images/",
eval= T,
fig.width = 7, fig.height = 7
)
# Chunk 3
library("Pupilla")
library("dplyr")
library("ggplot2")
library("tidyr")
options(dplyr.summarise.inform = FALSE)
# Chunk 4
setwd("I:\\Il mio Drive\\Esperimenti\\01 math anxiety\\task\\data")
# Chunk 5
#set your own working directory first!
#wd= choose.dir()
subject= 10 #vector of ids; only 1 for this example
#as coded in the program - these are the relevant eyelink messages
keep_events = c(
"fixation",
"cue",
"target1",
"sign",
"target2",
"calculation",
"response",
"post_resp_fix",
"Wait_Feedback",
"feedback"
)
#read
data= read_eyelink(subject, keep_events)
#split for eyetracker and behavioral data
ET= data$ET
BD= data$BD
ET$Subject= subject
BD$Subject= subject
# Chunk 6
#whether it's practice or experiment
ET$Phase = copy_variable(
"Phase",
id_var = "Subject",
constrained_var = "trial",
larger_df = ET,
smaller_df = BD
)
#result of the problem
ET$Result = copy_variable(
"Result",
id_var = "Subject",
constrained_var = "trial",
larger_df = ET,
smaller_df = BD
)
#response
ET$Response = copy_variable(
"response",
id_var = "Subject",
constrained_var = "trial",
larger_df = ET,
smaller_df = BD
)
#set accuracy
ET$Accuracy = ifelse(ET$Response == ET$Result,
"correct",
"incorrect")
#condition
ET$Cue = copy_variable(
"Cue",
id_var = "Subject",
constrained_var = "trial",
larger_df = ET,
smaller_df = BD
)
# Chunk 7
ET= ET[ET$Phase== "experiment",]
BD= BD[BD$Phase== "experiment",]
# Chunk 8
ET$Pupil= ET$paL
# Chunk 9
#very important, set zeros to NA for preprocessing
ET$Pupil= ifelse(ET$Pupil==0, NA, ET$Pupil)
ET$Pupil[ET$is_Fixation==0]= NA
# Chunk 10
cut_off= mean(ET$Pupil, na.rm= T) - 2.5*sd(ET$Pupil, na.rm= T)
ET$Pupil= ifelse(ET$Pupil < cut_off, NA, ET$Pupil)
# Chunk 11
ET= ET %>%
group_by(trial) %>%
mutate(Time= time-time[Event== "fixation"][1])
# Chunk 12
#the default parameters:
pp_options()
#this changes the width of the window for smoothing
pp_options("extend_by"= 25) #strip 50 ms before and after blinks
pp_options("extend_blink"= 25) #further extend prior to interpolation
pp_options("spar"= 0.8) #smoothing parameter
# Chunk 13
#entire preprocessing
ET= ET %>%
group_by(Subject, trial) %>%
mutate(Pupil_pp= pre_process(Pupil, Time))
# Chunk 14: trial 13
ET %>% filter(Subject==10 & trial== 13) %>%
check_series("Pupil", "Pupil_pp", "Time")
# Chunk 15
#drop
ET= ET %>% filter(!is.na(Pupil_pp))
ET$Time= downsample_time(ET$Time, 20)
#summarise the data for the new binned variable
ET= ET %>%
group_by(Subject, Cue, Event,
trial, Time, Accuracy) %>%
summarise(Pupil= median(Pupil_pp, na.rm = T))
table(ET$Time)
table(ET$Time[ET$trial==13])
table(ET$Time[ET$trial==12])
#z scores
ET$Pupil_raw= ET$Pupil
ET= ET %>%
group_by(Subject, trial) %>%
mutate(Pupil= ((Pupil - mean(Pupil[Event!= "response"]))/sd(Pupil[Event!= "response"])))
deviant_baseline= ET %>%
group_by(Subject, trial) %>%
summarise(Baseline_ps= median(Pupil[Event== "fixation"], na.rm=T))
deviant_baseline$Baseline_ps= scale(deviant_baseline$Baseline_ps)
#to omit
omit= deviant_baseline$trial[abs(deviant_baseline$Baseline_ps)>2]
omit= na.omit(omit)
if(length(omit)>0){
ET= ET %>% filter(!trial %in% omit)
}
omit
ET= ET %>%
group_by(Subject, Trial) %>%
mutate(Pupil= Pupil - median(Pupil[Event== "fixation"]))
ET= ET %>%
group_by(Subject, trial) %>%
mutate(Pupil= Pupil - median(Pupil[Event== "fixation"]))
ET= ET %>%
mutate(Part= ifelse(Event %in% c("feedback",
"post_resp_fix",
"Wait_Feedback"), 2, 1)) %>%
group_by(Subject, Part, trial) %>%
mutate(Time= ifelse(Part== 1,
Time - Time[Event== "cue"][1],
Time - Time[Event== "Wait_Feedback"][1]))
cut= 18000
ET= ET %>% filter(Time <= cut)
commonTheme= list(
theme(text= element_text(size= 16,
face="bold")),
xlab("Time (ms)"),
ylab("Pupil size change (z scores)"))
ylim= c(-0.5, 2.5)
ET %>%
filter(Event %in% c("fixation", "cue", "target1",
"sign", "target2", "calculation",
"response")) %>%
#realign
group_by(Subject, trial) %>%
mutate(Time= Time - Time[Event== "cue"][1]) %>%
#sottrai baseline
group_by(Subject, trial) %>%
mutate(Pupil= Pupil - median(Pupil[Event== "fixation"])) %>%
group_by(Subject, Cue, Time) %>%
summarise(SEM= sd(Pupil)/sqrt(n()),
Pupil= mean(Pupil)) %>%
filter(Time < cut) %>%
ggplot(aes(x= Time, y= Pupil, fill= Cue)) +
annotate("rect",
xmin = c(0, 4000, 12250),
xmax = c(750, 6250, 13000),
ymin = c(-Inf), ymax = c(Inf),
alpha = .3, fill = "light blue") +
geom_vline(xintercept = c(0, 4000, 4750, 5500, 6250, 12250),
linewidth= 1,
color= "gray", linetype= "dashed") +
geom_hline(yintercept = 0, linewidth= 1,
color= "gray", linetype= "dashed") +
geom_line(aes(color= Cue),
linewidth= 1.2) +
xlim(c(-750, cut)) +
geom_ribbon(aes(ymin= Pupil-SEM,
ymax= Pupil+SEM),
alpha= 0.5, color= NA) +
ggtitle("First part") + commonTheme +
ylim(ylim)
ylim= c(-0.5, 3.5)
#first phase
ET %>%
filter(Event %in% c("fixation", "cue", "target1",
"sign", "target2", "calculation",
"response")) %>%
#realign
group_by(Subject, trial) %>%
mutate(Time= Time - Time[Event== "cue"][1]) %>%
#sottrai baseline
group_by(Subject, trial) %>%
mutate(Pupil= Pupil - median(Pupil[Event== "fixation"])) %>%
group_by(Subject, Cue, Time) %>%
summarise(SEM= sd(Pupil)/sqrt(n()),
Pupil= mean(Pupil)) %>%
filter(Time < cut) %>%
ggplot(aes(x= Time, y= Pupil, fill= Cue)) +
annotate("rect",
xmin = c(0, 4000, 12250),
xmax = c(750, 6250, 13000),
ymin = c(-Inf), ymax = c(Inf),
alpha = .3, fill = "light blue") +
geom_vline(xintercept = c(0, 4000, 4750, 5500, 6250, 12250),
linewidth= 1,
color= "gray", linetype= "dashed") +
geom_hline(yintercept = 0, linewidth= 1,
color= "gray", linetype= "dashed") +
geom_line(aes(color= Cue),
linewidth= 1.2) +
xlim(c(-750, cut)) +
geom_ribbon(aes(ymin= Pupil-SEM,
ymax= Pupil+SEM),
alpha= 0.5, color= NA) +
ggtitle("First part") + commonTheme +
ylim(ylim)
sp=
ET %>%
#isola fase
filter(Event %in% c("fixation", "post_resp_fix", "Wait_Feedback", "feedback")) %>%
# #riparti da zero con il tempo
# group_by(Subject, trial) %>%
# mutate(Time= c(0, cumsum(diff(Time)))) %>%
#riallinea tempo
group_by(Subject, trial) %>%
mutate(Time= Time - Time[Event== "Wait_Feedback"][1]) %>%
#sottrai baseline
group_by(Subject, trial) %>%
mutate(Pupil= Pupil - median(Pupil[Event== "fixation"])) %>%
filter(Event %in% c("post_resp_fix", "Wait_Feedback", "feedback")) %>%
group_by(Cue, Time) %>%
summarise(SEM= sd(Pupil)/sqrt(n()),
Pupil= mean(Pupil)) %>%
filter(Time < 8000) %>%
#filter(Time != 4000) %>%
ggplot(aes(x= Time, y= Pupil, fill= Cue)) +
annotate("rect",
xmin = c(0, 4000),
xmax = c(750, 4750),
ymin = c(-Inf), ymax = c(Inf),
alpha = .3, fill = "light blue") +
geom_vline(xintercept = c(0, 4000),
linewidth= 1,
color= "gray", linetype= "dashed") +
geom_hline(yintercept = 0, linewidth= 1,
color= "gray", linetype= "dashed") +
geom_line(aes(color= Cue),
linewidth= 1.2) + xlim(c(-750, 8000)) +
geom_ribbon(aes(ymin= Pupil-SEM,
ymax= Pupil+SEM),
alpha= 0.5, color= NA) +
ggtitle("Second part") + commonTheme  + ylim(ylim)
sp
library("patchwork")
group= fp + sp + plot_layout(widths= c(0.67, 0.33), guides = "collect")
ET= ET %>%
mutate(Part= ifelse(Event %in% c("feedback",
"post_resp_fix",
"Wait_Feedback"), 2, 1)) %>%
group_by(Subject, Part, trial) %>%
mutate(Time= ifelse(Part== 1,
Time - Time[Event== "cue"][1],
Time - Time[Event== "Wait_Feedback"][1]))
cut= 18000
ET= ET %>% filter(Time <= cut)
commonTheme= list(
theme(text= element_text(size= 16,
face="bold")),
xlab("Time (ms)"),
ylab("Pupil size change (z scores)"))
ylim= c(-0.5, 3.5)
#first phase
fp=
ET %>%
filter(Event %in% c("fixation", "cue", "target1",
"sign", "target2", "calculation",
"response")) %>%
#realign
group_by(Subject, trial) %>%
mutate(Time= Time - Time[Event== "cue"][1]) %>%
#sottrai baseline
group_by(Subject, trial) %>%
mutate(Pupil= Pupil - median(Pupil[Event== "fixation"])) %>%
group_by(Subject, Cue, Time) %>%
summarise(SEM= sd(Pupil)/sqrt(n()),
Pupil= mean(Pupil)) %>%
filter(Time < cut) %>%
ggplot(aes(x= Time, y= Pupil, fill= Cue)) +
annotate("rect",
xmin = c(0, 4000, 12250),
xmax = c(750, 6250, 13000),
ymin = c(-Inf), ymax = c(Inf),
alpha = .3, fill = "light blue") +
geom_vline(xintercept = c(0, 4000, 4750, 5500, 6250, 12250),
linewidth= 1,
color= "gray", linetype= "dashed") +
geom_hline(yintercept = 0, linewidth= 1,
color= "gray", linetype= "dashed") +
geom_line(aes(color= Cue),
linewidth= 1.2) +
xlim(c(-750, cut)) +
geom_ribbon(aes(ymin= Pupil-SEM,
ymax= Pupil+SEM),
alpha= 0.5, color= NA) +
ggtitle("First part") + commonTheme +
ylim(ylim)
#second part
#second part - same baseline as first
sp=
ET %>%
#isola fase
filter(Event %in% c("fixation", "post_resp_fix", "Wait_Feedback", "feedback")) %>%
# #riparti da zero con il tempo
# group_by(Subject, trial) %>%
# mutate(Time= c(0, cumsum(diff(Time)))) %>%
#riallinea tempo
group_by(Subject, trial) %>%
mutate(Time= Time - Time[Event== "Wait_Feedback"][1]) %>%
#sottrai baseline
group_by(Subject, trial) %>%
mutate(Pupil= Pupil - median(Pupil[Event== "fixation"])) %>%
filter(Event %in% c("post_resp_fix", "Wait_Feedback", "feedback")) %>%
group_by(Cue, Time) %>%
summarise(SEM= sd(Pupil)/sqrt(n()),
Pupil= mean(Pupil)) %>%
filter(Time < 8000) %>%
#filter(Time != 4000) %>%
ggplot(aes(x= Time, y= Pupil, fill= Cue)) +
annotate("rect",
xmin = c(0, 4000),
xmax = c(750, 4750),
ymin = c(-Inf), ymax = c(Inf),
alpha = .3, fill = "light blue") +
geom_vline(xintercept = c(0, 4000),
linewidth= 1,
color= "gray", linetype= "dashed") +
geom_hline(yintercept = 0, linewidth= 1,
color= "gray", linetype= "dashed") +
geom_line(aes(color= Cue),
linewidth= 1.2) + xlim(c(-750, 8000)) +
geom_ribbon(aes(ymin= Pupil-SEM,
ymax= Pupil+SEM),
alpha= 0.5, color= NA) +
ggtitle("Second part") + commonTheme  + ylim(ylim)
library("patchwork")
group= fp + sp + plot_layout(widths= c(0.67, 0.33), guides = "collect")
group
file.choose()
file.choose()
from="C:\\Users\\blini\\Desktop\\Pupilla\\vignettes to knit outside\\Pupilla_Eyelink_SingleSubjectPreprocessing.Rmd"
to="C:\\Users\\blini\\Desktop\\Pupilla\\Pupilla\\vignettes\\Pupilla_Eyelink_SingleSubjectPreprocessing.Rmd"
knitr::knit(from,
output = to)
library("pkgdown")
clean_site()
build_site()
