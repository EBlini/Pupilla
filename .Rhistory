commonTheme= list(theme_bw(),
theme(text= element_text(size= 16,
face="bold")),
geom_hline(yintercept = 0, color= "black"),
geom_vline(xintercept = 0, color= "black"),
xlab("Time (ms)"),
ylab("Pupil dilation (z scores)"))
p1=
pupil_group %>%
#filter(Time>=0) %>%
ggplot(aes(x= Time, y= Pupil,
color= Group, linetype= Condition)) +
commonTheme +
geom_line(size= 1)
p1
pupil_diff= ET %>%
group_by(Subject, Group, Time, Condition) %>%
summarise(Pupil= mean(Pupil, na.rm= T)) %>%
group_by(Subject, Group, Time) %>%
summarise(Pupil= Pupil[Condition== "Nicotine-related"] - Pupil[Condition== "Control"])
pupil_diff_group= pupil_diff %>%
group_by(Group, Time) %>%
summarise(SEM= sd(Pupil)/sqrt(length(Pupil)),
N= length(Pupil),
Pupil= mean(Pupil)) %>%
mutate(ci.min= Pupil - 1.96 * SEM,
ci.max= Pupil + 1.96 * SEM)
p2= pupil_diff_group %>%
ggplot(aes(x= Time, y= Pupil, color= Group)) +
commonTheme +
geom_ribbon(aes(ymin= ci.min,
ymax= ci.max,
fill= Group),
alpha= 0.3, color= NA) +
geom_line(size= 1.2, show.legend = F) +
ylab("Pupil dilation by NRS") + guides(NULL)
p2
test= pupil_diff %>%
group_by(Time) %>%
summarise(p= t.test(Pupil[Group== "Smokers"],
Pupil[Group== "Non smokers"])$p.value)
plot(test$p ~ unique(pupil_diff$Time))
segments(x0= -975, x1= 2975, y0 = 0.05, y1 = 0.05)
segments(x0= 0, x1= 0, y0 = 0, y1 = 1)
pkgdown::build_site()
library("dplyr")
library("ggplot2")
library("Pupilla")
devtools::load_all(".")
wd= "G:\\Il mio Drive\\pupil NRS\\DotProbeTask\\02 PV\\02 data"
subject= 1:51
#groups
group= c("NS", "S", "NS", "NS", "S","S", "NS", "S",
"S", "S", "S", "S", "S", "S", "NS", "S",
"NS", "S", "NS", "S", "NS", "NS", "S", "NS",
"S", "NS", "NS", "NS", "NS", "NS", "NS", "S",
"S", "S", "S", "NS", "NS", "NS", "NS", "S",
"NS", "NS", "NS", "S", "S", "S", "S", "S",
"S", "S", "S")
data= read_TOBII(subject, wd)
ET= data$ET
BD= data$BD
ET$Event= ifelse(ET$Event== "", NA, ET$Event)
ET= tidyr::fill(ET, Event, .direction = "down")
ET= ET %>%
group_by(p_ID) %>%
mutate(Trial= detect_change(Event, key= "scrambled"))
table(ET$Trial)
table(BD$Trial)
ET= ET[ET$Trial>=0,]
#whether it's practice or experiment
ET$Phase= copy_variable("Phase")
table(ET$Phase, ET$Trial)
#discard practice
ET= ET[ET$Phase== "experiment",]
BD= BD[BD$Phase== "experiment",]
ET$Trial= copy_variable("Trial")
range(ET$Trial)
range(BD$Trial)
ET$Condition= copy_variable("Condition")
ET$Cue= copy_variable("Cue")
ET$Accuracy= copy_variable("Accuracy")
ET$Image= copy_variable("Image")
ET$RT = as.numeric(copy_variable("RT"))
ET$Pupil= consolidate_signal(ET$PupilSizeLeft, ET$PupilSizeRight,
ET$PupilValidityLeft, ET$PupilValidityRight,
strategy = "conservative",
plausible= c(2, 7))
ET$Pupil
ET= ET[ET$Event %in% c("scrambled", "target"),]
ET= ET %>%
group_by(p_ID, Trial) %>%
mutate(Time= c(0,
cumsum(diff(TimeStamp))))
summary(ET$Time)
ET= ET %>%
group_by(p_ID, Trial) %>%
mutate(Anomaly= ifelse(max(Time)>4500, 1, 0))
table(ET$p_ID[ET$Anomaly== 1], ET$Trial[ET$Anomaly== 1]) #for 2 participants, the trial around the break...
ET= ET[ET$Anomaly== 0,]
#realign Time according to start of the target
ET= ET %>%
group_by(p_ID, Trial) %>%
mutate(Time= Time - Time[Event== "target"][1])
summary(ET$Time)
sum(ET$Time >-1000 & ET$Time<3000)/nrow(ET)
ET= ET[ET$Time >-1000 & ET$Time<3000,]
#filter subjs here and add group
ET= ET %>% filter(!p_ID %in% c(2, 9, 10, 13, 25, 29, 30, 34, 38, 48, 49))
# group= group[-c(2, 9, 10, 13, 25, 29, 30, 34, 38,48, 49)]
# table(group)
ET$Group= group[ET$p_ID]
pp_options()
#entire preprocessing
ET= ET %>%
group_by(p_ID, Trial) %>%
mutate(Pupil_pp= pre_process(Pupil, Time))
#drop
ET= ET %>% filter(!is.na(Pupil_pp))
#check_series
prova= ET[ET$p_ID== 20 & ET$Trial== 24,]
plot(prova$Time, prova$Pupil_pp)
ET %>% filter(p_ID==20 & Trial== 24) %>%
ggplot(aes(y= Pupil, x= Time)) +
geom_line() +
geom_line(aes(y= Pupil_pp), color= "red")
ET %>% filter(p_ID==4 & Trial== 24) %>%
ggplot(aes(y= Pupil, x= Time)) +
geom_line() +
geom_line(aes(y= Pupil_pp), color= "red")
ET %>% filter(p_ID==14 & Trial== 24) %>%
ggplot(aes(y= Pupil, x= Time)) +
geom_line() +
geom_line(aes(y= Pupil_pp), color= "red")
commonTheme= ggplot2::theme(
text= ggplot2::element_text(size= 14, face= "bold"),
axis.text= ggplot2::element_text(size= 14, face= "bold", color= "black"))
ET %>% filter(p_ID==14 & Trial== 24) %>%
ggplot(aes(y= Pupil, x= Time)) +
geom_line() +
geom_line(aes(y= Pupil_pp), color= "red")
ET %>% filter(p_ID==14 & Trial== 24) %>%
ggplot(aes(y= Pupil, x= Time)) +
geom_line() +
geom_line(aes(y= Pupil_pp), color= "red") +
commonTheme
ET %>% filter(p_ID==14 & Trial== 24) %>%
ggplot(aes(y= Pupil, x= Time)) +
geom_line() +
geom_line(aes(y= Pupil_pp), color= "red", show.legend = T) +
commonTheme
ET %>% filter(p_ID==14 & Trial== 24) %>%
ggplot(aes(y= Pupil, x= Time)) +
geom_line() +
geom_line(aes(y= Pupil_pp), color= "red", size= 1.5) +
commonTheme
ET %>% filter(p_ID==14 & Trial== 24) %>%
ggplot(aes(y= Pupil, x= Time)) +
geom_line() +
geom_line(aes(y= Pupil_pp),
color= "red",
linewidth= 1.5) +
commonTheme
ET %>% filter(p_ID==14 & Trial== 24) %>%
ggplot(aes(y= Pupil, x= Time)) +
geom_line() +
geom_line(aes(y= Pupil_pp),
color= "red",
linewidth= 1.2) +
commonTheme
ET %>% filter(p_ID==14 & Trial== 24) %>%
ggplot(aes(y= Pupil, x= Time)) +
geom_line(linewidth= 1.1) +
geom_line(aes(y= Pupil_pp),
color= "red",
linewidth= 1.2) +
commonTheme
prova= ET %>% filter(p_ID==14 & Trial== 24)
series1= prova$Pupil
series2= prova$Pupil_pp
time= prova$Time
ggDF= data.frame(series1= series1,
series2= series2,
time= time)
ggplot(ggDF,
aes(y= series1, x= time)) +
geom_line(linewidth= 1.1) +
geom_line(aes(y= series2),
color= "red",
linewidth= 1.2) +
commonTheme
check_series= function(series1,
series2,
time){
#consolidate DF
ggDF= data.frame(series1= series1,
series2= series2,
time= time)
#plot
p= ggplot(ggDF,
aes(y= series1, x= time)) +
geom_line(linewidth= 1.1) +
geom_line(aes(y= series2),
color= "red",
linewidth= 1.2) +
commonTheme
return(p)
}
ET %>% filter(p_ID==14 & Trial== 24) %>%
check_series(Pupil, Pupil_pp, Time)
ET %>% filter(p_ID==14 & Trial== 24) %>%
check_series(.$Pupil, .$Pupil_pp, .$Time)
ggDF= data.frame(series1= series1,
series2= series2,
time= time)
ggDF
ggplot(ggDF,
aes(y= series1, x= time)) +
geom_line(linewidth= 1.1) +
geom_line(aes(y= series2),
color= "red",
linewidth= 1.2) +
commonTheme
p= ggplot(ggDF,
aes(y= series1, x= time)) +
geom_line(linewidth= 1.1) +
geom_line(aes(y= series2),
color= "red",
linewidth= 1.2) +
commonTheme +
ylab("Series") + xlab("Time")
p
check_series= function(series1,
series2,
time){
#consolidate DF
ggDF= data.frame(series1= series1,
series2= series2,
time= time)
#plot
p= ggplot(ggDF,
aes(y= series1, x= time)) +
geom_line(linewidth= 1.1) +
geom_line(aes(y= series2),
color= "red",
linewidth= 1.2) +
commonTheme +
ylab("Series") + xlab("Time")
return(p)
}
ET %>% filter(p_ID==14 & Trial== 24) %>%
check_series(.$Pupil, .$Pupil_pp, .$Time)
check_series= function(DF,
series1,
series2,
time){
if(is.null(DF)){
#consolidate DF
ggDF= data.frame(series1= series1,
series2= series2,
time= time)
} else {
ggDF= data.frame(series1= DF[, series1],
series2= DF[, series2],
time= DF[, time])
}
#plot
p= ggplot(ggDF,
aes(y= series1, x= time)) +
geom_line(linewidth= 1.1) +
geom_line(aes(y= series2),
color= "red",
linewidth= 1.2) +
commonTheme +
ylab("Series") + xlab("Time")
return(p)
}
ET %>% filter(p_ID==14 & Trial== 24) %>%
check_series(Pupil, Pupil_pp, Time)
ET %>% filter(p_ID==14 & Trial== 24) %>%
check_series(., Pupil, Pupil_pp, Time)
data= prova
if(is.null(data)){
#consolidate DF
ggDF= data.frame(series1= series1,
series2= series2,
time= time)
} else {
ggDF= data.frame(series1= data[, series1],
series2= data[, series2],
time= data[, time])
}
ET %>% filter(p_ID==14 & Trial== 24) %>%
check_series("Pupil", "Pupil_pp", "Time")
ET %>% filter(p_ID==14 & Trial== 24) %>%
check_series(., "Pupil", "Pupil_pp", "Time")
series1= "Pupil"
series2= "Pupil_pp"
time= "Time"
is.null(data)
ggDF= data.frame(series1= data[, series1],
series2= data[, series2],
time= data[, time])
p= ggplot(ggDF,
aes(y= series1, x= time)) +
geom_line(linewidth= 1.1) +
geom_line(aes(y= series2),
color= "red",
linewidth= 1.2) +
commonTheme +
ylab("Series") + xlab("Time")
p
ggDF
colnames(ggDF)
dput(colnames(ggDF))
ggDF= data.frame(series1= data[, series1],
series2= data[, series2],
time= data[, time])
colnames(ggDF)= c("series1", "series2", "time")
#plot
p= ggplot(ggDF,
aes(y= series1, x= time)) +
geom_line(linewidth= 1.1) +
geom_line(aes(y= series2),
color= "red",
linewidth= 1.2) +
commonTheme +
ylab("Series") + xlab("Time")
ggplot(ggDF,
aes(y= series1, x= time)) +
geom_line(linewidth= 1.1)
ggplot(ggDF,
aes(y= series1, x= time)) +
geom_line(linewidth= 1.1) +
geom_line(aes(y= series2),
color= "red",
linewidth= 1.2)
ggplot(ggDF,
aes(y= series1, x= time)) +
geom_line(linewidth= 1.1) +
geom_line(aes(y= series2),
color= "red",
linewidth= 1.2) +
commonTheme
ggplot(ggDF,
aes(y= series1, x= time)) +
geom_line(linewidth= 1.1) +
geom_line(aes(y= series2),
color= "red",
linewidth= 1.2) +
commonTheme +
ylab("Series") + xlab("Time")
p= ggplot(ggDF,
aes(y= series1, x= time)) +
geom_line(linewidth= 1.1) +
geom_line(aes(y= series2),
color= "red",
linewidth= 1.2) +
commonTheme +
ylab("Series") + xlab("Time")
return(p)
prova= ET %>% filter(p_ID==14 & Trial== 24)
check_series= function(data,
series1,
series2,
time){
if(is.null(data)){
#consolidate DF
ggDF= data.frame(series1= series1,
series2= series2,
time= time)
} else {
ggDF= data.frame(series1= data[, series1],
series2= data[, series2],
time= data[, time])
}
colnames(ggDF)= c("series1", "series2", "time")
#plot
p= ggplot(ggDF,
aes(y= series1, x= time)) +
geom_line(linewidth= 1.1) +
geom_line(aes(y= series2),
color= "red",
linewidth= 1.2) +
commonTheme +
ylab("Series") + xlab("Time")
return(p)
}
ET %>% filter(p_ID==14 & Trial== 24) %>%
check_series(., "Pupil", "Pupil_pp", "Time")
ET %>% filter(p_ID==24 & Trial== 19) %>%
check_series(., "Pupil", "Pupil_pp", "Time")
ET %>% filter(p_ID==32 & Trial== 19) %>%
check_series(., "Pupil", "Pupil_pp", "Time")
ET %>% filter(p_ID==32 & Trial== 19) %>%
check_series("Pupil", "Pupil_pp", "Time")
ET %>% filter(p_ID==24 & Trial== 19) %>%
check_series("Pupil", "Pupil_pp", "Time")
ET %>% filter(p_ID==24 & Trial== 45) %>%
check_series("Pupil", "Pupil_pp", "Time")
ET %>% filter(p_ID==24 & Trial== 102) %>%
check_series("Pupil", "Pupil_pp", "Time")
pp_options()
pp_options("spar"= 0.5)
pp_options()
#entire preprocessing
ET= ET %>%
group_by(p_ID, Trial) %>%
mutate(Pupil_pp= pre_process(Pupil, Time))
#drop
ET= ET %>% filter(!is.na(Pupil_pp))
#check_series
#commonTheme
commonTheme= ggplot2::theme(
text= ggplot2::element_text(size= 14, face= "bold"),
axis.text= ggplot2::element_text(size= 14, face= "bold", color= "black"))
ET %>% filter(p_ID==14 & Trial== 24) %>%
ggplot(aes(y= Pupil, x= Time)) +
geom_line(linewidth= 1.1) +
geom_line(aes(y= Pupil_pp),
color= "red",
linewidth= 1.2) +
commonTheme
prova= ET %>% filter(p_ID==14 & Trial== 24)
check_series= function(data,
series1,
series2,
time){
if(is.null(data)){
#consolidate DF
ggDF= data.frame(series1= series1,
series2= series2,
time= time)
} else {
ggDF= data.frame(series1= data[, series1],
series2= data[, series2],
time= data[, time])
}
colnames(ggDF)= c("series1", "series2", "time")
#plot
p= ggplot(ggDF,
aes(y= series1, x= time)) +
geom_line(linewidth= 1.1) +
geom_line(aes(y= series2),
color= "red",
linewidth= 1.2) +
commonTheme +
ylab("Series") + xlab("Time")
return(p)
}
ET %>% filter(p_ID==24 & Trial== 102) %>%
check_series("Pupil", "Pupil_pp", "Time")
#commonTheme
commonTheme= ggplot2::theme(
text= ggplot2::element_text(size= 14, face= "bold"),
axis.text= ggplot2::element_text(size= 14, face= "bold", color= "black"))
#' Plots two time series against each other
#'
#' The function plots two time series against each other.
#' The intended use is generally to check the original vs. preprocessed data.
#' The first series is plotted with a black line, the second one - typically
#' the reconstructed series - with a red line. Nas show up as interruptions
#' of the lines. The function can be used within dplyr's style pipes -
#' in which case 'data' can be omitted and the other variables must
#' be provided as quoted variables' names - or standard vectors may be
#' provided - in which case 'data' should be NULL and args should be passed
#' by name.
#'
#' @param data Optional. Can be omitted if passed through dplyr's style
#' pipelines (through '.'), in which case the other arguments should be
#' passed as quoted variables' names.
#' @param series1 A vector variable with values for the first time series.
#' It is plotted by means of a black line. Typically, the original data.
#' @param series2 A vector variable with values for the second time series.
#' It is plotted by means of a red line. Typically, the processed data.
#' @param time A vector variable indicating the elapsed time, which is
#' used for the x axis.
#' @return A plot.
#'
#' @export
check_series= function(data,
series1,
series2,
time){
if(is.null(data)){
#consolidate DF
ggDF= data.frame(series1= series1,
series2= series2,
time= time)
} else {
ggDF= data.frame(series1= data[, series1],
series2= data[, series2],
time= data[, time])
}
colnames(ggDF)= c("series1", "series2", "time")
#plot
p= ggplot2::ggplot(ggDF,
aes(y= series1, x= time)) +
ggplot2::geom_line(linewidth= 1.1) +
ggplot2::geom_line(aes(y= series2),
color= "red",
linewidth= 1.2) +
commonTheme +
ggplot2::ylab("Series") +
ggplot2::xlab("Time")
return(p)
}
ET %>% filter(p_ID==24 & Trial== 102) %>%
check_series("Pupil", "Pupil_pp", "Time")
devtools::load_all(".")
pkgdown::build_site_github_pages()
devtools::load_all(".")
