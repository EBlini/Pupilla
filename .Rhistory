pupil_diff_group= pupil_diff %>%
group_by(Group, Time) %>%
summarise(SEM= sd(Pupil)/sqrt(length(Pupil)),
N= length(Pupil),
Pupil= mean(Pupil)) %>%
mutate(ci.min= Pupil - 1.96 * SEM,
ci.max= Pupil + 1.96 * SEM)
p2= pupil_diff_group %>%
ggplot(aes(x= Time, y= Pupil, color= Group)) +
commonTheme +
geom_ribbon(aes(ymin= ci.min,
ymax= ci.max,
fill= Group),
alpha= 0.3, color= NA) +
geom_line(size= 1.2, show.legend = F) +
ylab("Pupil dilation by NRS") + guides(NULL)
p2
test= pupil_diff %>%
group_by(Time) %>%
summarise(p= t.test(Pupil[Group== "Smokers"],
Pupil[Group== "Non smokers"])$p.value)
plot(test$p ~ unique(pupil_diff$Time))
segments(x0= -975, x1= 2975, y0 = 0.05, y1 = 0.05)
segments(x0= 0, x1= 0, y0 = 0, y1 = 1)
#test
library("dplyr")
library("ggplot2")
library("Pupilla")
wd= "G:\\Il mio Drive\\pupil NRS\\DotProbeTask\\02 PV\\02 data"
subject= 1:51
#groups
group= c("NS", "S", "NS", "NS", "S","S", "NS", "S",
"S", "S", "S", "S", "S", "S", "NS", "S",
"NS", "S", "NS", "S", "NS", "NS", "S", "NS",
"S", "NS", "NS", "NS", "NS", "NS", "NS", "S",
"S", "S", "S", "NS", "NS", "NS", "NS", "S",
"NS", "NS", "NS", "S", "S", "S", "S", "S",
"S", "S", "S")
data= read_TOBII(subject, wd)
ET= data$ET
BD= data$BD
ET$Event= ifelse(ET$Event== "", NA, ET$Event)
ET= tidyr::fill(ET, Event, .direction = "down")
ET= ET %>%
group_by(p_ID) %>%
mutate(Trial= detect_change(Event, key= "scrambled"))
table(ET$Trial)
table(BD$Trial)
ET= ET[ET$Trial>=0,]
#whether it's practice or experiment
ET$Phase= copy_variable("Phase")
table(ET$Phase, ET$Trial)
#discard practice
ET= ET[ET$Phase== "experiment",]
BD= BD[BD$Phase== "experiment",]
ET$Trial= copy_variable("Trial")
range(ET$Trial)
range(BD$Trial)
ET$Condition= copy_variable("Condition")
ET$Cue= copy_variable("Cue")
ET$Accuracy= copy_variable("Accuracy")
ET$Image= copy_variable("Image")
ET$RT = as.numeric(copy_variable("RT"))
ET$Pupil= consolidate_signal(ET$PupilSizeLeft, ET$PupilSizeRight,
ET$PupilValidityLeft, ET$PupilValidityRight,
strategy = "conservative",
plausible= c(2, 7))
ET$Pupil
ET= ET[ET$Event %in% c("scrambled", "target"),]
ET= ET %>%
group_by(p_ID, Trial) %>%
mutate(Time= c(0,
cumsum(diff(TimeStamp))))
summary(ET$Time)
ET= ET %>%
group_by(p_ID, Trial) %>%
mutate(Anomaly= ifelse(max(Time)>4500, 1, 0))
table(ET$p_ID[ET$Anomaly== 1], ET$Trial[ET$Anomaly== 1]) #for 2 participants, the trial around the break...
ET= ET[ET$Anomaly== 0,]
#realign Time according to start of the target
ET= ET %>%
group_by(p_ID, Trial) %>%
mutate(Time= Time - Time[Event== "target"][1])
summary(ET$Time)
sum(ET$Time >-1000 & ET$Time<3000)/nrow(ET)
ET= ET[ET$Time >-1000 & ET$Time<3000,]
#filter subjs here and add group
ET= ET %>% filter(!p_ID %in% c(2, 9, 10, 13, 25, 29, 30, 34, 38, 48, 49))
# group= group[-c(2, 9, 10, 13, 25, 29, 30, 34, 38,48, 49)]
# table(group)
ET$Group= group[ET$p_ID]
pp_options()
pp_options("spar"= 0.2)
#entire preprocessing
ET= ET %>%
group_by(p_ID, Trial) %>%
mutate(Pupil_pp= pre_process(Pupil, Time))
#drop
ET= ET %>% filter(!is.na(Pupil_pp))
#check_series
ET %>% filter(p_ID==12 & Trial== 102) %>%
check_series("Pupil", "Pupil_pp", "Time")
ET %>% filter(p_ID==12 & Trial== 103) %>%
check_series("Pupil", "Pupil_pp", "Time")
ET %>% filter(p_ID==12 & Trial== 104) %>%
check_series("Pupil", "Pupil_pp", "Time")
ET %>% filter(p_ID==12 & Trial== 105) %>%
check_series("Pupil", "Pupil_pp", "Time")
ET %>% filter(p_ID==12 & Trial== 106) %>%
check_series("Pupil", "Pupil_pp", "Time")
devtools::load_all(".")
gc()
#test
library("dplyr")
library("ggplot2")
library("Pupilla")
wd= "G:\\Il mio Drive\\pupil NRS\\DotProbeTask\\02 PV\\02 data"
subject= 1:51
#groups
group= c("NS", "S", "NS", "NS", "S","S", "NS", "S",
"S", "S", "S", "S", "S", "S", "NS", "S",
"NS", "S", "NS", "S", "NS", "NS", "S", "NS",
"S", "NS", "NS", "NS", "NS", "NS", "NS", "S",
"S", "S", "S", "NS", "NS", "NS", "NS", "S",
"NS", "NS", "NS", "S", "S", "S", "S", "S",
"S", "S", "S")
data= read_TOBII(subject, wd)
ET= data$ET
BD= data$BD
ET$Event= ifelse(ET$Event== "", NA, ET$Event)
ET= tidyr::fill(ET, Event, .direction = "down")
ET= ET %>%
group_by(p_ID) %>%
mutate(Trial= detect_change(Event, key= "scrambled"))
table(ET$Trial)
table(BD$Trial)
ET= ET[ET$Trial>=0,]
#whether it's practice or experiment
ET$Phase= copy_variable("Phase")
table(ET$Phase, ET$Trial)
#discard practice
ET= ET[ET$Phase== "experiment",]
BD= BD[BD$Phase== "experiment",]
ET$Trial= copy_variable("Trial")
range(ET$Trial)
range(BD$Trial)
ET$Condition= copy_variable("Condition")
ET$Cue= copy_variable("Cue")
ET$Accuracy= copy_variable("Accuracy")
ET$Image= copy_variable("Image")
ET$RT = as.numeric(copy_variable("RT"))
ET$Pupil= consolidate_signal(ET$PupilSizeLeft, ET$PupilSizeRight,
ET$PupilValidityLeft, ET$PupilValidityRight,
strategy = "conservative",
plausible= c(2, 7))
ET$Pupil
ET= ET[ET$Event %in% c("scrambled", "target"),]
ET= ET %>%
group_by(p_ID, Trial) %>%
mutate(Time= c(0,
cumsum(diff(TimeStamp))))
summary(ET$Time)
ET= ET %>%
group_by(p_ID, Trial) %>%
mutate(Anomaly= ifelse(max(Time)>4500, 1, 0))
table(ET$p_ID[ET$Anomaly== 1], ET$Trial[ET$Anomaly== 1]) #for 2 participants, the trial around the break...
ET= ET[ET$Anomaly== 0,]
#realign Time according to start of the target
ET= ET %>%
group_by(p_ID, Trial) %>%
mutate(Time= Time - Time[Event== "target"][1])
summary(ET$Time)
sum(ET$Time >-1000 & ET$Time<3000)/nrow(ET)
ET= ET[ET$Time >-1000 & ET$Time<3000,]
#filter subjs here and add group
ET= ET %>% filter(!p_ID %in% c(2, 9, 10, 13, 25, 29, 30, 34, 38, 48, 49))
# group= group[-c(2, 9, 10, 13, 25, 29, 30, 34, 38,48, 49)]
# table(group)
ET$Group= group[ET$p_ID]
pp_options()
pp_options("spar"= 0.2)
#entire preprocessing
ET= ET %>%
group_by(p_ID, Trial) %>%
mutate(Pupil_pp= pre_process(Pupil, Time))
#drop
ET= ET %>% filter(!is.na(Pupil_pp))
#check_series
ET %>% filter(p_ID==12 & Trial== 102) %>%
check_series("Pupil", "Pupil_pp", "Time")
ET %>% filter(p_ID==12 & Trial== 103) %>%
check_series("Pupil", "Pupil_pp", "Time")
ET %>% filter(p_ID==12 & Trial== 104) %>%
check_series("Pupil", "Pupil_pp", "Time")
ET %>% filter(p_ID==12 & Trial== 105) %>%
check_series("Pupil", "Pupil_pp", "Time")
ET %>% filter(p_ID==12 & Trial== 106) %>%
check_series("Pupil", "Pupil_pp", "Time")
setwd("C:\\Users\\blini\\Desktop\\Pupilla\\ppprova")
data= ET
ID= "p_ID"
Trial= "Trial"
series1= "Pupil"
series2= "Pupil_pp"
time= "Time"
id_vector= data[,colnames(data)== ID]
is.numeric(id_vector)
is.numeric(id_vector)
str(id_vector)
id_vector= unlist(data[,colnames(data)== ID])
is.numeric(id_vector)
trial_vector= unlist(data[,colnames(data)== Trial])
is.numeric(trial_vector
)
unique(id_vector)
grid= expand.grid(id= unique(id_vector),
trial= unique(trial_vector))
grid
id_uniques= unique(id_vector)
trial_uniques= unique(trial_vector)
trial_uniques
dir.create(file.path(getwd(), "check_all_series"),
showWarnings = FALSE)
dir.create(file.path(getwd(), "check_all_series"),
showWarnings = FALSE)
id_uniques
i_loop=1
file.path(getwd(), "check_all_series", i_loop)
dir.create(file.path(getwd(), "check_all_series", i_loop),
showWarnings = FALSE)
trial_uniques
trial_loop=0
p= data[id_uniques== id_loop & trial_uniques== trial_loop,]
id_loop=1
p= data[id_uniques== id_loop & trial_uniques== trial_loop,]
id_loop
id_uniques
p= data[id_vector== id_loop & trial_vector== trial_loop,]
check_series(data = p,
series1,
series2,
time)
p= check_series(data = p,
series1,
series2,
time)
p +
ggplot2::ggtitle(paste0("ID ", id_loop, " and Trial ", trial_loop))
p +
ggplot2::ggtitle(paste0("ID ", id_loop, ", Trial ", trial_loop))
p= p +
ggplot2::ggtitle(paste0("ID ", id_loop, ", Trial ", trial_loop))
paste0("Trial ", trial_loop)
ggplot2::ggsave(filename = paste0("Trial ", trial_loop),
plot = p, device= "png")
0.968*7
0.842 *7
ggplot2::ggsave(filename = paste0("Trial ", trial_loop),
plot = p,
device= ".png", width = 6.8,
height = 5.9)
ggplot2::ggsave(filename = paste0("Trial ", trial_loop),
plot = p,
device= "png", width = 6.8,
height = 5.9)
ggplot2::ggsave(filename = paste0("Trial ", trial_loop),
plot = p,
device= "jpeg", width = 6.8,
height = 5.9)
?ggsave
ggplot2::ggsave(filename = paste0("Trial ", trial_loop),
path= file.path(getwd(), "check_all_series", id_loop),
plot = p,
device= "jpeg",
scale= 6)
ggplot2::ggsave(filename = paste0("Trial ", trial_loop),
path= file.path(getwd(), "check_all_series", id_loop),
plot = p,
device= NULL,
scale= 6)
ggplot2::ggsave(filename = paste0("Trial ", trial_loop),
path= file.path(getwd(), "check_all_series", id_loop),
plot = p,
#device= NULL,
scale= 6)
ggplot2::ggsave(filename = paste0("Trial ", trial_loop, ".png"),
path= file.path(getwd(), "check_all_series", id_loop),
plot = p,
scale= 6)
check_all_series= function(data,
ID,
Trial,
series1,
series2,
time){
#get vectors for the grid - this is slower than ideal
id_vector= unlist(data[,colnames(data)== ID])
trial_vector= unlist(data[,colnames(data)== Trial])
#check numeric
if(!is.numeric(id_vector))(warning("ID variable must be numeric"))
if(!is.numeric(trial_vector))(warning("Trial variable must be numeric"))
# #get grid, can be quite massive
# grid= expand.grid(id= unique(id_vector),
#                   trial= unique(trial_vector))
#
#it is cleaner to create a folder for each ID
id_uniques= unique(id_vector)
trial_uniques= unique(trial_vector)
#friendly messages
print("The folder is in the current path")
print("Beware: not all files may be rewritten")
dir.create(file.path(getwd(), "check_all_series"),
showWarnings = FALSE)
#now for each subject
for(id_loop in id_uniques){
#create id subfolder
dir.create(file.path(getwd(), "check_all_series", id_loop),
showWarnings = FALSE)
#trial loop
for(trial_loop in trial_uniques){
p= data[id_vector== id_loop & trial_vector== trial_loop,]
p= check_series(data = p,
series1,
series2,
time)
p= p +
ggplot2::ggtitle(paste0("ID ", id_loop, ", Trial ", trial_loop))
ggplot2::ggsave(filename = paste0("Trial ", trial_loop, ".png"),
path= file.path(getwd(), "check_all_series", id_loop),
plot = p,
scale= 6)
}
} #end id_loop
}
check_all_series(data,
ID,
Trial,
series1,
series2,
time)
#commonTheme
commonTheme= ggplot2::theme(
text= ggplot2::element_text(size= 14, face= "bold"),
axis.text= ggplot2::element_text(size= 14, face= "bold", color= "black"))
#' Plots two time series against each other
#'
#' The function plots two time series against each other.
#' The intended use is generally to check the original vs. preprocessed data.
#' The first series is plotted with a black line, the second one - typically
#' the reconstructed series - with a red line. Nas show up as interruptions
#' of the lines. The function can be used within dplyr's style pipes -
#' in which case 'data' can be omitted and the other variables must
#' be provided as quoted variables' names - or standard vectors may be
#' provided - in which case 'data' should be NULL and args should be passed
#' by name.
#'
#' @param data Optional. Can be omitted if passed through dplyr's style
#' pipelines (through '.'), in which case the other arguments should be
#' passed as quoted variables' names.
#' @param series1 A vector variable with values for the first time series.
#' It is plotted by means of a black line. Typically, the original data.
#' @param series2 A vector variable with values for the second time series.
#' It is plotted by means of a red line. Typically, the processed data.
#' @param time A vector variable indicating the elapsed time, which is
#' used for the x axis.
#' @return A plot.
#'
#' @export
check_series= function(data,
series1,
series2,
time){
if(is.null(data)){
#consolidate DF
ggDF= data.frame(series1= series1,
series2= series2,
time= time)
} else {
ggDF= data.frame(series1= data[, series1],
series2= data[, series2],
time= data[, time])
}
colnames(ggDF)= c("series1", "series2", "time")
#plot
p= ggplot2::ggplot(ggDF,
aes(y= series1, x= time)) +
ggplot2::geom_line(linewidth= 1.2) +
ggplot2::geom_line(aes(y= series2),
color= "red",
linewidth= 1.1) +
commonTheme +
ggplot2::ylab("Series") +
ggplot2::xlab("Time")
return(p)
}
warnings()
ggplot2::ggsave(filename = paste0("Trial ", trial_loop, ".png"),
path= file.path(getwd(), "check_all_series", id_loop),
plot = p,
#scale= 6,
width = 6, height = 5)
#commonTheme
commonTheme= ggplot2::theme(
text= ggplot2::element_text(size= 14, face= "bold"),
axis.text= ggplot2::element_text(size= 14, face= "bold", color= "black"))
#' Plots two time series against each other
#'
#' The function plots two time series against each other.
#' The intended use is generally to check the original vs. preprocessed data.
#' The first series is plotted with a black line, the second one - typically
#' the reconstructed series - with a red line. Nas show up as interruptions
#' of the lines. The function can be used within dplyr's style pipes -
#' in which case 'data' can be omitted and the other variables must
#' be provided as quoted variables' names - or standard vectors may be
#' provided - in which case 'data' should be NULL and args should be passed
#' by name.
#'
#' @param data Optional. Can be omitted if passed through dplyr's style
#' pipelines (through '.'), in which case the other arguments should be
#' passed as quoted variables' names.
#' @param series1 A vector variable with values for the first time series.
#' It is plotted by means of a black line. Typically, the original data.
#' @param series2 A vector variable with values for the second time series.
#' It is plotted by means of a red line. Typically, the processed data.
#' @param time A vector variable indicating the elapsed time, which is
#' used for the x axis.
#' @return A plot.
#'
#' @export
check_series= function(data,
series1,
series2,
time){
if(is.null(data)){
#consolidate DF
ggDF= data.frame(series1= series1,
series2= series2,
time= time)
} else {
ggDF= data.frame(series1= data[, series1],
series2= data[, series2],
time= data[, time])
}
colnames(ggDF)= c("series1", "series2", "time")
#plot
p= ggplot2::ggplot(ggDF,
aes(y= series1, x= time)) +
ggplot2::geom_line(linewidth= 1.2) +
ggplot2::geom_line(aes(y= series2),
color= "red",
linewidth= 1.1) +
commonTheme +
ggplot2::ylab("Series") +
ggplot2::xlab("Time")
return(p)
}
check_all_series= function(data,
ID,
Trial,
series1,
series2,
time){
#get vectors for the grid - this is slower than ideal
id_vector= unlist(data[,colnames(data)== ID])
trial_vector= unlist(data[,colnames(data)== Trial])
#check numeric
if(!is.numeric(id_vector))(warning("ID variable must be numeric"))
if(!is.numeric(trial_vector))(warning("Trial variable must be numeric"))
# #get grid, can be quite massive
# grid= expand.grid(id= unique(id_vector),
#                   trial= unique(trial_vector))
#
#it is cleaner to create a folder for each ID
id_uniques= unique(id_vector)
trial_uniques= unique(trial_vector)
#friendly messages
print("The folder is in the current path")
print("Beware: not all files may be rewritten")
dir.create(file.path(getwd(), "check_all_series"),
showWarnings = FALSE)
#now for each subject
for(id_loop in id_uniques){
#create id subfolder
dir.create(file.path(getwd(), "check_all_series", id_loop),
showWarnings = FALSE)
#trial loop
for(trial_loop in trial_uniques){
p= data[id_vector== id_loop & trial_vector== trial_loop,]
p= check_series(data = p,
series1,
series2,
time)
p= p +
ggplot2::ggtitle(paste0("ID ", id_loop, ", Trial ", trial_loop))
ggplot2::ggsave(filename = paste0("Trial ", trial_loop, ".png"),
path= file.path(getwd(), "check_all_series", id_loop),
plot = p,
#scale= 6,
width = 6,
height = 5)
}
} #end id_loop
} #end function
check_all_series(data,
ID,
Trial,
series1,
series2,
time)
library(Pupilla)
devtools::load_all(".")
pkgdown::build_site_github_pages()
