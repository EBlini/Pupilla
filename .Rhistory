ET= ET %>% filter(!is.na(Pupil_pp))
ET$Time= downsample_time(ET$Time, 20)
#summarise the data for the new binned variable
ET= ET %>%
group_by(Subject, Cue, Event,
trial, Time, Accuracy) %>%
summarise(Pupil= median(Pupil_pp, na.rm = T))
table(ET$Time)
table(ET$Time[ET$trial==13])
table(ET$Time[ET$trial==12])
#z scores
ET$Pupil_raw= ET$Pupil
ET= ET %>%
group_by(Subject, trial) %>%
mutate(Pupil= ((Pupil - mean(Pupil[Event!= "response"]))/sd(Pupil[Event!= "response"])))
deviant_baseline= ET %>%
group_by(Subject, trial) %>%
summarise(Baseline_ps= median(Pupil[Event== "fixation"], na.rm=T))
deviant_baseline$Baseline_ps= scale(deviant_baseline$Baseline_ps)
#to omit
omit= deviant_baseline$trial[abs(deviant_baseline$Baseline_ps)>2]
omit= na.omit(omit)
if(length(omit)>0){
ET= ET %>% filter(!trial %in% omit)
}
omit
ET= ET %>%
group_by(Subject, Trial) %>%
mutate(Pupil= Pupil - median(Pupil[Event== "fixation"]))
ET= ET %>%
group_by(Subject, trial) %>%
mutate(Pupil= Pupil - median(Pupil[Event== "fixation"]))
ET= ET %>%
mutate(Part= ifelse(Event %in% c("feedback",
"post_resp_fix",
"Wait_Feedback"), 2, 1)) %>%
group_by(Subject, Part, trial) %>%
mutate(Time= ifelse(Part== 1,
Time - Time[Event== "cue"][1],
Time - Time[Event== "Wait_Feedback"][1]))
cut= 18000
ET= ET %>% filter(Time <= cut)
commonTheme= list(
theme(text= element_text(size= 16,
face="bold")),
xlab("Time (ms)"),
ylab("Pupil size change (z scores)"))
ylim= c(-0.5, 2.5)
ET %>%
filter(Event %in% c("fixation", "cue", "target1",
"sign", "target2", "calculation",
"response")) %>%
#realign
group_by(Subject, trial) %>%
mutate(Time= Time - Time[Event== "cue"][1]) %>%
#sottrai baseline
group_by(Subject, trial) %>%
mutate(Pupil= Pupil - median(Pupil[Event== "fixation"])) %>%
group_by(Subject, Cue, Time) %>%
summarise(SEM= sd(Pupil)/sqrt(n()),
Pupil= mean(Pupil)) %>%
filter(Time < cut) %>%
ggplot(aes(x= Time, y= Pupil, fill= Cue)) +
annotate("rect",
xmin = c(0, 4000, 12250),
xmax = c(750, 6250, 13000),
ymin = c(-Inf), ymax = c(Inf),
alpha = .3, fill = "light blue") +
geom_vline(xintercept = c(0, 4000, 4750, 5500, 6250, 12250),
linewidth= 1,
color= "gray", linetype= "dashed") +
geom_hline(yintercept = 0, linewidth= 1,
color= "gray", linetype= "dashed") +
geom_line(aes(color= Cue),
linewidth= 1.2) +
xlim(c(-750, cut)) +
geom_ribbon(aes(ymin= Pupil-SEM,
ymax= Pupil+SEM),
alpha= 0.5, color= NA) +
ggtitle("First part") + commonTheme +
ylim(ylim)
ylim= c(-0.5, 3.5)
#first phase
ET %>%
filter(Event %in% c("fixation", "cue", "target1",
"sign", "target2", "calculation",
"response")) %>%
#realign
group_by(Subject, trial) %>%
mutate(Time= Time - Time[Event== "cue"][1]) %>%
#sottrai baseline
group_by(Subject, trial) %>%
mutate(Pupil= Pupil - median(Pupil[Event== "fixation"])) %>%
group_by(Subject, Cue, Time) %>%
summarise(SEM= sd(Pupil)/sqrt(n()),
Pupil= mean(Pupil)) %>%
filter(Time < cut) %>%
ggplot(aes(x= Time, y= Pupil, fill= Cue)) +
annotate("rect",
xmin = c(0, 4000, 12250),
xmax = c(750, 6250, 13000),
ymin = c(-Inf), ymax = c(Inf),
alpha = .3, fill = "light blue") +
geom_vline(xintercept = c(0, 4000, 4750, 5500, 6250, 12250),
linewidth= 1,
color= "gray", linetype= "dashed") +
geom_hline(yintercept = 0, linewidth= 1,
color= "gray", linetype= "dashed") +
geom_line(aes(color= Cue),
linewidth= 1.2) +
xlim(c(-750, cut)) +
geom_ribbon(aes(ymin= Pupil-SEM,
ymax= Pupil+SEM),
alpha= 0.5, color= NA) +
ggtitle("First part") + commonTheme +
ylim(ylim)
sp=
ET %>%
#isola fase
filter(Event %in% c("fixation", "post_resp_fix", "Wait_Feedback", "feedback")) %>%
# #riparti da zero con il tempo
# group_by(Subject, trial) %>%
# mutate(Time= c(0, cumsum(diff(Time)))) %>%
#riallinea tempo
group_by(Subject, trial) %>%
mutate(Time= Time - Time[Event== "Wait_Feedback"][1]) %>%
#sottrai baseline
group_by(Subject, trial) %>%
mutate(Pupil= Pupil - median(Pupil[Event== "fixation"])) %>%
filter(Event %in% c("post_resp_fix", "Wait_Feedback", "feedback")) %>%
group_by(Cue, Time) %>%
summarise(SEM= sd(Pupil)/sqrt(n()),
Pupil= mean(Pupil)) %>%
filter(Time < 8000) %>%
#filter(Time != 4000) %>%
ggplot(aes(x= Time, y= Pupil, fill= Cue)) +
annotate("rect",
xmin = c(0, 4000),
xmax = c(750, 4750),
ymin = c(-Inf), ymax = c(Inf),
alpha = .3, fill = "light blue") +
geom_vline(xintercept = c(0, 4000),
linewidth= 1,
color= "gray", linetype= "dashed") +
geom_hline(yintercept = 0, linewidth= 1,
color= "gray", linetype= "dashed") +
geom_line(aes(color= Cue),
linewidth= 1.2) + xlim(c(-750, 8000)) +
geom_ribbon(aes(ymin= Pupil-SEM,
ymax= Pupil+SEM),
alpha= 0.5, color= NA) +
ggtitle("Second part") + commonTheme  + ylim(ylim)
sp
library("patchwork")
group= fp + sp + plot_layout(widths= c(0.67, 0.33), guides = "collect")
ET= ET %>%
mutate(Part= ifelse(Event %in% c("feedback",
"post_resp_fix",
"Wait_Feedback"), 2, 1)) %>%
group_by(Subject, Part, trial) %>%
mutate(Time= ifelse(Part== 1,
Time - Time[Event== "cue"][1],
Time - Time[Event== "Wait_Feedback"][1]))
cut= 18000
ET= ET %>% filter(Time <= cut)
commonTheme= list(
theme(text= element_text(size= 16,
face="bold")),
xlab("Time (ms)"),
ylab("Pupil size change (z scores)"))
ylim= c(-0.5, 3.5)
#first phase
fp=
ET %>%
filter(Event %in% c("fixation", "cue", "target1",
"sign", "target2", "calculation",
"response")) %>%
#realign
group_by(Subject, trial) %>%
mutate(Time= Time - Time[Event== "cue"][1]) %>%
#sottrai baseline
group_by(Subject, trial) %>%
mutate(Pupil= Pupil - median(Pupil[Event== "fixation"])) %>%
group_by(Subject, Cue, Time) %>%
summarise(SEM= sd(Pupil)/sqrt(n()),
Pupil= mean(Pupil)) %>%
filter(Time < cut) %>%
ggplot(aes(x= Time, y= Pupil, fill= Cue)) +
annotate("rect",
xmin = c(0, 4000, 12250),
xmax = c(750, 6250, 13000),
ymin = c(-Inf), ymax = c(Inf),
alpha = .3, fill = "light blue") +
geom_vline(xintercept = c(0, 4000, 4750, 5500, 6250, 12250),
linewidth= 1,
color= "gray", linetype= "dashed") +
geom_hline(yintercept = 0, linewidth= 1,
color= "gray", linetype= "dashed") +
geom_line(aes(color= Cue),
linewidth= 1.2) +
xlim(c(-750, cut)) +
geom_ribbon(aes(ymin= Pupil-SEM,
ymax= Pupil+SEM),
alpha= 0.5, color= NA) +
ggtitle("First part") + commonTheme +
ylim(ylim)
#second part
#second part - same baseline as first
sp=
ET %>%
#isola fase
filter(Event %in% c("fixation", "post_resp_fix", "Wait_Feedback", "feedback")) %>%
# #riparti da zero con il tempo
# group_by(Subject, trial) %>%
# mutate(Time= c(0, cumsum(diff(Time)))) %>%
#riallinea tempo
group_by(Subject, trial) %>%
mutate(Time= Time - Time[Event== "Wait_Feedback"][1]) %>%
#sottrai baseline
group_by(Subject, trial) %>%
mutate(Pupil= Pupil - median(Pupil[Event== "fixation"])) %>%
filter(Event %in% c("post_resp_fix", "Wait_Feedback", "feedback")) %>%
group_by(Cue, Time) %>%
summarise(SEM= sd(Pupil)/sqrt(n()),
Pupil= mean(Pupil)) %>%
filter(Time < 8000) %>%
#filter(Time != 4000) %>%
ggplot(aes(x= Time, y= Pupil, fill= Cue)) +
annotate("rect",
xmin = c(0, 4000),
xmax = c(750, 4750),
ymin = c(-Inf), ymax = c(Inf),
alpha = .3, fill = "light blue") +
geom_vline(xintercept = c(0, 4000),
linewidth= 1,
color= "gray", linetype= "dashed") +
geom_hline(yintercept = 0, linewidth= 1,
color= "gray", linetype= "dashed") +
geom_line(aes(color= Cue),
linewidth= 1.2) + xlim(c(-750, 8000)) +
geom_ribbon(aes(ymin= Pupil-SEM,
ymax= Pupil+SEM),
alpha= 0.5, color= NA) +
ggtitle("Second part") + commonTheme  + ylim(ylim)
library("patchwork")
group= fp + sp + plot_layout(widths= c(0.67, 0.33), guides = "collect")
group
file.choose()
file.choose()
from="C:\\Users\\blini\\Desktop\\Pupilla\\vignettes to knit outside\\Pupilla_Eyelink_SingleSubjectPreprocessing.Rmd"
to="C:\\Users\\blini\\Desktop\\Pupilla\\Pupilla\\vignettes\\Pupilla_Eyelink_SingleSubjectPreprocessing.Rmd"
knitr::knit(from,
output = to)
library("pkgdown")
clean_site()
build_site()
library("pkgdown")
clean_site()
build_site()
from="C:\\Users\\blini\\Desktop\\Pupilla\\vignettes to knit outside\\Pupilla_Eyelink_SingleSubjectPreprocessing.Rmd"
to="C:\\Users\\blini\\Desktop\\Pupilla\\Pupilla\\vignettes\\Pupilla_Eyelink_SingleSubjectPreprocessing.Rmd"
knitr::knit(from,
output = to)
clean_site()
build_site()
from="C:\\Users\\blini\\Desktop\\Pupilla\\vignettes to knit outside\\Pupilla_Eyelink_SingleSubjectPreprocessing.Rmd"
to="C:\\Users\\blini\\Desktop\\Pupilla\\Pupilla\\vignettes\\Pupilla_Eyelink_SingleSubjectPreprocessing.Rmd"
knitr::knit(from,
output = to)
from="C:\\Users\\blini\\Desktop\\Pupilla\\vignettes to knit outside\\Pupilla_Eyelink_SingleSubjectPreprocessing.Rmd"
to="C:\\Users\\blini\\Desktop\\Pupilla\\Pupilla\\vignettes\\Pupilla_Eyelink_SingleSubjectPreprocessing.Rmd"
knitr::knit(from,
output = to)
clean_site()
build_site()
#add difference between easy and hard
#change working dir as necessary
setwd("I:\\Il mio Drive\\Esperimenti\\01 math anxiety\\task\\data")
library("readxl")
library("dplyr")
library("ggplot2")
library("Pupilla")
library("lme4")
library("patchwork")
library("car")
#load data
files= list.files(path = paste0(getwd(), "\\pp_data"),
pattern = ".RDS")
ET= {}
for (i in files){
temp= readRDS(paste0(getwd(), "\\pp_data\\", i))
ET= rbind(ET, temp)
}
#questionnaires
Q= readRDS("Quest_pp.RData")
#realign and prep data
ET=
ET %>%
mutate(Part= ifelse(Event %in% c("feedback",
"post_resp_fix",
"Wait_Feedback"), 2, 1)) %>%
group_by(Subject, Part, trial) %>%
mutate(Time= ifelse(Part== 1,
Time - Time[Event== "cue"][1],
Time - Time[Event== "Wait_Feedback"][1] + 20000))
ET= ET %>%
#sottrai baseline
group_by(Subject, trial) %>%
mutate(Pupil= Pupil - median(Pupil[Event== "fixation"]))
#now polish
legit_time= c(seq(25, 18000, 25), seq(20025, 28000, 25))
ET= ET %>% filter(Time %in% legit_time)
ET= ET[! (ET$Part== 1 & ET$Time >18000),]
with(ET, tapply(Time, Part, min))
with(ET, tapply(Time, Part, max))
#accuracy
ET$Accuracy= ifelse(ET$Accuracy== "correct", 1, 0)
#add amas, ACC, etc
#get questionnaire scores
AMAS= c(scale(Q$AMAS))
names(AMAS)= Q$ID
ET$AMAS= NA
ET$AMAS= AMAS[as.character(ET$Subject)]
#TAI
#get questionnaire scores
TAI= c(scale(Q$TAI))
names(TAI)= Q$ID
ET$TAI= NA
ET$TAI= TAI[as.character(ET$Subject)]
#STAI
#get questionnaire scores
STAI= c(scale(Q$STAI))
names(STAI)= Q$ID
ET$STAI= NA
ET$STAI= STAI[as.character(ET$Subject)]
#resort!
ET= ET %>%
arrange(Subject, trial, Time) #%>%
# group_by(Subject, trial, Time, Cue, Accuracy, STAI) %>%
# summarise(Pupil= mean(Pupil))
unique(ET$Time)
#LMEM:
# without covariates, can we predict pupil on the basis of questionnaire?
#AMAS
data= ET
#dec_amas= readRDS("results/decoding.RData")
formula= "Pupil ~ AMAS+Cue+AMAS:Cue + (1|Subject)"
dv= "Pupil"
time= "Time"
id= "Subject"
trial= "trial"
nfolds= 3
t_thresh= 2
consensus_thresh= 0.99
f_thresh= 4
type= 3
#first change names for your convenience
DF= data.frame(data)
DF$dv= DF[,colnames(DF)== dv]
DF$time= DF[,colnames(DF)== time]
DF$subject= DF[,colnames(DF)== id]
DF$trial= DF[,colnames(DF)== trial]
#then you create folds by simply taking trial by subject order
DF$interaction= interaction(DF$trial, DF$subject)
lev= levels(DF$interaction)
folds= rep(1:nfolds, times= ceiling(length(lev)/nfolds))
folds= folds[1:length(lev)]
names(folds)= lev
ind= folds[DF$interaction]
names(ind)= NULL
DF$Fold= ind
#as formula
formula= as.formula(formula)
#split data for every level of time
if(is.factor(DF$time))(time_lev= levels(factor(DF$time))) else (time_lev= unique(DF$time))
time_list= lapply(time_lev, function(x){
ind= DF$time %in% x
DF[ind,]
})
#now create a function that, given data, fits the models for each fold
fit_folds= function(data2, nfolds){
data2$pred= NA
res= vector("list", nfolds)
for(i in 1:nfolds){
train= data2[!data2$Fold %in% i,]
#needless here
#test= data2[data2$Fold %in% i,]
#train
mod= NULL
mod= tryCatch(lmerTest::lmer(formula,
train),
error= function(dummy)(mod= NULL))
if(is.null(mod))(res[[i]]= NULL) else (res[[i]]= car::Anova(mod, type= type, test.statistic= "F"))
}
return(res)
}
all_fit= lapply(time_list, function(x)fit_folds(x, nfolds))
time_list[[1]]
a=time_list[[1]]
str(a)
fit_folds(a, nfolds)
str(time_list)
dim(time_list)
names(time_list)
(time_list)[[3]]
time_lev
time_lev= seq(25, 12000, 25)
time_list= lapply(time_lev, function(x){
ind= DF$time %in% x
DF[ind,]
})
#now create a function that, given data, fits the models for each fold
fit_folds= function(data2, nfolds){
data2$pred= NA
res= vector("list", nfolds)
for(i in 1:nfolds){
train= data2[!data2$Fold %in% i,]
#needless here
#test= data2[data2$Fold %in% i,]
#train
mod= NULL
mod= tryCatch(lmerTest::lmer(formula,
train),
error= function(dummy)(mod= NULL))
if(is.null(mod))(res[[i]]= NULL) else {
res[[i]]= car::Anova(mod, type= type, test.statistic= "F")
}
}
return(res)
}
#now fit for every time point and fold
all_fit= lapply(time_list, function(x)fit_folds(x, nfolds))
library("reticulate")
library("dplyr")
library("Pupilla")
library("ggplot2")
library("emmeans")
library("lmerTest")
# #create python environment
#conda_create("my_env")
#use_miniconda("my_env")
# #install packages in the environment
# py_install("pandas")
# py_install("datamatrix")
options(dplyr.summarise.inform = FALSE)
reticulate::repl_python()
from datamatrix import io, convert
address= "C:\\Users\\blini\\Downloads\\mathot crossval prova\\zhou_et_al_2021.pkl"
data= io.readpickle(address)
data= convert.to_pandas(data)
quit
use_miniconda("my_env")
reticulate::repl_python()
from datamatrix import io, convert
address= "C:\\Users\\blini\\Downloads\\mathot crossval prova\\zhou_et_al_2021.pkl"
data= io.readpickle(address)
data= convert.to_pandas(data)
quit
library("reticulate")
library("dplyr")
library("Pupilla")
library("ggplot2")
library("emmeans")
library("lmerTest")
# #create python environment
#conda_create("my_env")
use_miniconda("my_env")
# #install packages in the environment
# py_install("pandas")
# py_install("datamatrix")
options(dplyr.summarise.inform = FALSE)
reticulate::repl_python()
from datamatrix import io, convert
address= "C:\\Users\\blini\\Downloads\\mathot crossval prova\\zhou_et_al_2021.pkl"
data= io.readpickle(address)
data= convert.to_pandas(data)
quit
DF= py$data #bring to R
DF2 = lapply(1:nrow(DF), function(x) {
res = data.frame(
Pupil = as.vector(DF$pupil[[x]]),
Set_size = DF$set_size[x],
Subject = DF$subject_nr[x],
Color_type = DF$color_type[x],
Time = seq(0, 3, length = 300)
)
return(res)
})
DF2= do.call(rbind, DF2)
DF2= DF2 %>%
group_by(Subject, Time) %>%
mutate(Trial= 1:n())
DF2= data.frame(DF2)
DF2$Set_size= as.factor(DF2$Set_size)
setwd()
setwd(choose.dir())
saveRDS(DF2, "zhou et al. 2022.RData")
readRDS("data//zhou et al. 2022.RData")
library(Pupilla)
devtools::load_all(".")
library("pkgdown")
clean_site()
build_site()
clean_site()
build_site()
clean_site()
build_site()
clean_site()
build_site()
install.packages(c("afex", "askpass", "BayesFactor", "blogdown", "bookdown", "brew", "brio", "broom", "bslib", "buildmer", "cachem", "caret", "checkmate", "cli", "clock", "coda", "commonmark", "config", "cowplot", "cpp11", "credentials", "crosstalk", "data.table", "datawizard", "DBI", "dbplyr", "deldir", "desc", "deSolve", "digest", "downlit", "dplyr", "DT", "dtplyr", "e1071", "ellipse", "emmeans", "evaluate", "eyelinkReader", "FactoMineR", "fansi", "fastICA", "fontawesome", "fs", "future", "future.apply", "gargle", "gdata", "gert", "GGally", "ggbeeswarm", "ggeffects", "ggplot2", "ggpmisc", "ggpp", "ggrepel", "glmnet", "glmnetUtils", "glue", "googledrive", "googlesheets4", "graphlayouts", "gtable", "gtools", "hardhat", "haven", "heplots", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "httr2", "igraph", "insight", "interp", "jsonlite", "keras", "labeling", "later", "lava", "lavaan", "lifecycle", "listenv", "lme4", "lubridate", "markdown", "MatrixModels", "matrixStats", "minqa", "modelr", "mvtnorm", "nnls", "openssl", "ordinal", "pan", "parallelly", "parameters", "patchwork", "pbapply", "performance", "permutes", "pillar", "plotrix", "pls", "plyr", "polyclip", "pracma", "prettyunits", "pROC", "processx", "prodlim", "profvis", "progress", "progressr", "promises", "ps", "psych", "purrr", "quantreg", "R.oo", "R.utils", "ragg", "raster", "rasterVis", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "recipes", "rematch", "remotes", "reprex", "reticulate", "rmarkdown", "RNifti", "roxygen2", "rprojroot", "rstudioapi", "Rtsne", "sandwich", "sass", "scales", "scatterplot3d", "servr", "shiny", "sp", "splus2R", "stringi", "stringr", "sys", "systemfonts", "tensorflow", "terra", "testthat", "textshaping", "tfruns", "tibble", "tidygraph", "tidyr", "timechange", "timeDate", "tinytex", "tzdb", "ucminf", "usethis", "utf8", "uuid", "vctrs", "vipor", "viridis", "viridisLite", "vroom", "waldo", "withr", "xfun", "xml2", "xts", "yaml", "zip", "zoo"))
install.packages(c("afex", "askpass", "BayesFactor", "blogdown", "bookdown", "brew", "brio", "broom", "bslib", "buildmer", "cachem", "caret", "checkmate", "cli", "clock", "coda", "commonmark", "config", "cowplot", "cpp11", "credentials", "crosstalk", "data.table", "datawizard", "DBI", "dbplyr", "deldir", "desc", "deSolve", "digest", "downlit", "dplyr", "DT", "dtplyr", "e1071", "ellipse", "emmeans", "evaluate", "eyelinkReader", "FactoMineR", "fansi", "fastICA", "fontawesome", "fs", "future", "future.apply", "gargle", "gdata", "gert", "GGally", "ggbeeswarm", "ggeffects", "ggplot2", "ggpmisc", "ggpp", "ggrepel", "glmnet", "glmnetUtils", "glue", "googledrive", "googlesheets4", "graphlayouts", "gtable", "gtools", "hardhat", "haven", "heplots", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "httr2", "igraph", "insight", "interp", "jsonlite", "keras", "labeling", "later", "lava", "lavaan", "lifecycle", "listenv", "lme4", "lubridate", "markdown", "MatrixModels", "matrixStats", "minqa", "modelr", "mvtnorm", "nnls", "openssl", "ordinal", "pan", "parallelly", "parameters", "patchwork", "pbapply", "performance", "permutes", "pillar", "plotrix", "pls", "plyr", "polyclip", "pracma", "prettyunits", "pROC", "processx", "prodlim", "profvis", "progress", "progressr", "promises", "ps", "psych", "purrr", "quantreg", "R.oo", "R.utils", "ragg", "raster", "rasterVis", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "recipes", "rematch", "remotes", "reprex", "reticulate", "rmarkdown", "RNifti", "roxygen2", "rprojroot", "rstudioapi", "Rtsne", "sandwich", "sass", "scales", "scatterplot3d", "servr", "shiny", "sp", "splus2R", "stringi", "stringr", "sys", "systemfonts", "tensorflow", "terra", "testthat", "textshaping", "tfruns", "tibble", "tidygraph", "tidyr", "timechange", "timeDate", "tinytex", "tzdb", "ucminf", "usethis", "utf8", "uuid", "vctrs", "vipor", "viridis", "viridisLite", "vroom", "waldo", "withr", "xfun", "xml2", "xts", "yaml", "zip", "zoo"))
install.packages(c("afex", "askpass", "BayesFactor", "blogdown", "bookdown", "brew", "brio", "broom", "bslib", "buildmer", "cachem", "caret", "checkmate", "cli", "clock", "coda", "commonmark", "config", "cowplot", "cpp11", "credentials", "crosstalk", "data.table", "datawizard", "DBI", "dbplyr", "deldir", "desc", "deSolve", "digest", "downlit", "dplyr", "DT", "dtplyr", "e1071", "ellipse", "emmeans", "evaluate", "eyelinkReader", "FactoMineR", "fansi", "fastICA", "fontawesome", "fs", "future", "future.apply", "gargle", "gdata", "gert", "GGally", "ggbeeswarm", "ggeffects", "ggplot2", "ggpmisc", "ggpp", "ggrepel", "glmnet", "glmnetUtils", "glue", "googledrive", "googlesheets4", "graphlayouts", "gtable", "gtools", "hardhat", "haven", "heplots", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "httr2", "igraph", "insight", "interp", "jsonlite", "keras", "labeling", "later", "lava", "lavaan", "lifecycle", "listenv", "lme4", "lubridate", "markdown", "MatrixModels", "matrixStats", "minqa", "modelr", "mvtnorm", "nnls", "openssl", "ordinal", "pan", "parallelly", "parameters", "patchwork", "pbapply", "performance", "permutes", "pillar", "plotrix", "pls", "plyr", "polyclip", "pracma", "prettyunits", "pROC", "processx", "prodlim", "profvis", "progress", "progressr", "promises", "ps", "psych", "purrr", "quantreg", "R.oo", "R.utils", "ragg", "raster", "rasterVis", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "recipes", "rematch", "remotes", "reprex", "reticulate", "rmarkdown", "RNifti", "roxygen2", "rprojroot", "rstudioapi", "Rtsne", "sandwich", "sass", "scales", "scatterplot3d", "servr", "shiny", "sp", "splus2R", "stringi", "stringr", "sys", "systemfonts", "tensorflow", "terra", "testthat", "textshaping", "tfruns", "tibble", "tidygraph", "tidyr", "timechange", "timeDate", "tinytex", "tzdb", "ucminf", "usethis", "utf8", "uuid", "vctrs", "vipor", "viridis", "viridisLite", "vroom", "waldo", "withr", "xfun", "xml2", "xts", "yaml", "zip", "zoo"))
